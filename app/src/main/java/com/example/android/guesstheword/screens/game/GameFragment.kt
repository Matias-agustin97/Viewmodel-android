/*
 * Copyright (C) 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.guesstheword.screens.game

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.NavHostFragment
import com.example.android.guesstheword.R
import com.example.android.guesstheword.databinding.GameFragmentBinding

/**
 * Fragment where the game is played
 */
class GameFragment : Fragment() {


    private lateinit var binding: GameFragmentBinding

    //Create a refrence to the viewmodel of this fragment

    private lateinit var viewModel: GameViewModel

    // Always use ViewModelProvider to create ViewModel objects rather than directly instantiating an instance of ViewModel.
    // If you create the ViewModel instance using the ViewModel class, a new object is created every time the fragment is re-created.
    // Instead, create the ViewModel instance using a ViewModelProvider

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {

        // Inflate view and obtain an instance of the binding class
        binding = DataBindingUtil.inflate(
                inflater,
                R.layout.game_fragment,
                container,
                false
        )

        //Instanciete viewmodel woith view model provider
        Log.i("GameFragment", "Called ViewModelProvider.get")
        viewModel = ViewModelProvider(this).get(GameViewModel::class.java)

        //, attach an Observer object to the LiveData object for the current score
        viewModel.score.observe(viewLifecycleOwner, Observer { newScore ->

            //When the scoretext changes update the text
            //This makes obsolote the methods updateWordText() and updateScoreText()
            binding.scoreText.text=newScore.toString()
        })

        viewModel.word.observe(viewLifecycleOwner, Observer { newWord->
            binding.wordText.text=newWord
        })

        viewModel.eventGameFinish.observe(viewLifecycleOwner, Observer<Boolean> {hasFinished ->
            if (hasFinished) gameFinished()
        })


        binding.correctButton.setOnClickListener { onCorrect() }
        binding.skipButton.setOnClickListener { onSkip() }
        binding.endGameButton.setOnClickListener{onEndGame()}
        //updateScoreText()
        //updateWordText()
        return binding.root

    }


    private fun onSkip() {
        viewModel.onSkip()
       // updateScoreText()
        //updateWordText()
    }

    private fun onCorrect() {
        viewModel.onCorrect()
        //updateScoreText()
        //updateWordText()
    }


//    private fun updateWordText() {
//        binding.wordText.text = viewModel.word.value
//    }
//
//    private fun updateScoreText() {
//        binding.scoreText.text = viewModel.score.toString()
//    }

    private fun onEndGame(){
        gameFinished()
    }

    private fun gameFinished() {
        Toast.makeText(activity, "Game has just finished", Toast.LENGTH_SHORT).show()

        //Remember that the GameFragmentDirections class was generated by the safeargs
        //plugin
        val action = GameFragmentDirections.actionGameToScore()
        action.score = viewModel.score.value?:0
        NavHostFragment.findNavController(this).navigate(action)

        viewModel.onGameFinishComplete()
    }
}
